module XamlGeneration

open XmlGeneration
open System
open System.IO
open Xunit.Sdk
open Ast

let getDocument (dialog : Dialog) =

  let controls = 
    match dialog with
    | DIALOG(_, ctls) -> ctls |> Seq.toList
    | DIALOGEX(_, ctls) -> ctls |> Seq.toList
    | Error -> List.empty

  let ltexts = 
    controls
    |> List.map(fun x -> 
      match x with 
      | LTEXT(text,_,coords,_) -> 
        Some(
          XElement "TextBlock" [ 
            XAttribute "Text" text
            XAttribute "Width" (coords.width* 2)
            XAttribute "Height" (coords.height* 2)
            XAttribute "Canvas.Left"( coords.x * 2)
            XAttribute "Canvas.Top" (coords.y* 2)
            XAttribute "FontSize" "12"
          ])
      | EDITTEXT(_,coords,_) -> 
        Some(
          XElement "TextBox" [ 
            XAttribute "Width" (coords.width* 2)
            XAttribute "Height" (coords.height* 2)
            XAttribute "Canvas.Left" (coords.x * 2)
            XAttribute "Canvas.Top" (coords.y * 2)
            XAttribute "FontSize" "12"
          ])
      | COMBOBOX(_,coords,_) -> 
        Some(
          XElement "ComboBox" [ 
            XAttribute "Width" (coords.width* 2)
            XAttribute "Canvas.Left" (coords.x * 2)
            XAttribute "Canvas.Top" (coords.y * 2)
            XAttribute "FontSize" "12"
          ])
      | _ -> None)
    |> List.choose id
      

  let rowDefinitions = 
    XElement "Grid.RowDefinitions" [
      XElement "RowDefinition" [ XAttribute "Height" "40"]
      XElement "RowDefinition" [ XAttribute "Height" "40"]
      XElement "RowDefinition" [ XAttribute "Height" "40"]
    ]
  let gridElements = List.append [rowDefinitions] ltexts
  let grid = XElement "Canvas" ltexts

  let doc = 
    XDocument (XDeclaration "1.0" "UTF-8" "yes") [
      XComment "This document was automatically generated by a configuration script."
      XElement "UserControl" [ grid ]
    ]

  doc

let saveToFile (_fileName : string) (dialog: Dialog)= 
  let doc = getDocument dialog
  doc.Save(fileName = _fileName)
